@using BlockchainAuthIoT.Models 
@page "/realtime"

@if (!AccessControl.ContractLoaded)
{
    <span class="text-warning">Load a contract first!</span>
}
else if (!AccountProvider.AccountLoaded)
{
    <span>Load your wallet first!</span>
}
else if (!RealtimeClient.Connected)
{
    <EditForm Model="remote">
        <label>Host:</label>
        <InputText @bind-Value="remote.Host" />
        <br />
        <label>Port:</label>
        <InputNumber @bind-Value="remote.Port" />
        <br />
        <label>Resource:</label>
        <InputText @bind-Value="remote.Resource" />
        <br />
        <button class="btn-sm btn-success" @onclick="Connect">Connect</button>
    </EditForm>
}
else
{
    <button class="btn-sm btn-success mb-3" @onclick="Disconnect">Disconnect</button>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Time</th>
                <th scope="col">Device</th>
                <th scope="col">Reading</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reading in buffer.ToArray())
            {
                <tr>
                    <td>@reading.Date.ToShortTimeString()</td>
                    <td>@reading.Device</td>

                    @switch (reading)
                    {
                        case TemperatureReading x:
                            <td>@x.Value</td>
                            break;

                        case HumidityReading x:
                            <td>@x.Value</td>
                            break;
                    }
                </tr>
            }
        </tbody>
    </table>
}
