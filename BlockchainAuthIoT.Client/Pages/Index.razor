@page "/"
@using BlockchainAuthIoT.Core.Extensions 

<h5>Identity</h5>
<EditForm Model="AccountProvider.CurrentIdentity">
    <label>Current identity:</label>
    <InputSelect @bind-Value="AccountProvider.CurrentIdentity">
        @foreach (var identity in AccountProvider.Identities)
        {
            <option value="@identity">@identity</option>
        }
    </InputSelect>
</EditForm>
<span><b>Balance:</b> @AccountProvider.CurrentBalance.ToEth() ETH</span>
<button class="btn-sm btn-success" @onclick="RefreshBalance">Refresh Balance</button>
<hr />

<h5>Contract Loading / Deployment</h5>
<EditForm Model="contractAddress">
    <label>Contract address:</label>
    <InputText @bind-Value="contractAddress" />
    <button class="btn-sm btn-success" @onclick="LoadContract">Load</button>
</EditForm>

<EditForm Model="signerAddress">
    <label>Signer address:</label>
    <InputText @bind-Value="signerAddress" />
    <button class="btn-sm btn-success" @onclick="DeployNewContract">Deploy New</button>
</EditForm>
<hr />

@if (AccessControl.ContractLoaded)
{
    <h5>Contract Management</h5>
    <span><b>Initialized:</b> @AccessControl.Initialized</span>
    @if (!AccessControl.Initialized)
    {
        <button class="btn-sm btn-success ml-3" @onclick="InitializeContract">Initialize Contract</button>
        <br />
        <span>Price (ETH):</span>
        <EditForm Model="this">
            <InputNumber @bind-Value="contractPriceEth" />
        </EditForm>
    }
    <br />
    <span><b>Signed:</b> @AccessControl.Signed</span>
    @if (!AccessControl.Signed)
    {
        <button class="btn-sm btn-success ml-3" @onclick="SignContract">Sign Contract</button>
    }
    <br />
    <span><b>Price:</b> @AccessControl.Price.ToEth() (@AccessControl.AmountPaid.ToEth() paid)</span>
    <br />
    <hr />

    <h5>Admins</h5>
    <ul>
        @foreach (var admin in AccessControl.Admins)
        {
            <li>
                @admin
                <button class="btn-sm btn-danger" @onclick="(async () => await RemoveAdmin(admin))"><span class="oi oi-x"></span></button>
            </li>
        }
    </ul>

    <EditForm Model="this">
        <h6>Add new</h6>
        <label>Address:</label>
        <InputText @bind-Value="newAdmin" />
        <button class="btn-sm btn-success" @onclick="AddAdmin"><span class="oi oi-plus"></span> Add</button>
    </EditForm>
    <hr />

    <h5>On-Chain Policies</h5>
    <ul>
        @foreach (var ocp in AccessControl.OCPs)
        {
            <li>
                <b>Resource:</b> @ocp.Resource | <b>Start time:</b> @ocp.StartTime | <b>Expiration:</b> @ocp.Expiration
                <button class="btn-sm btn-success" @onclick="(async () => await GetOCPBoolParam(ocp))">Get Bool</button>
                <button class="btn-sm btn-success" @onclick="(async () => await GetOCPIntParam(ocp))">Get Int</button>
                <button class="btn-sm btn-success" @onclick="(async () => await GetOCPStringParam(ocp))">Get String</button>
                <button class="btn-sm btn-primary" @onclick="(async () => await SetOCPBoolParam(ocp))">Set Bool</button>
                <button class="btn-sm btn-primary" @onclick="(async () => await SetOCPIntParam(ocp))">Set Int</button>
                <button class="btn-sm btn-primary" @onclick="(async () => await SetOCPStringParam(ocp))">Set String</button>
            </li>
        }
    </ul>

    <EditForm Model="newOCP">
        <h6>Create new</h6>
        <label>Resource:</label>
        <InputText @bind-Value="newOCP.Resource" />
        <label>Start Time:</label>
        <InputDateTime @bind-Value="newOCP.StartTime" />
        <label>Expiration:</label>
        <InputDateTime @bind-Value="newOCP.Expiration" />
        <button class="btn-sm btn-success" @onclick="CreateOCP"><span class="oi oi-plus"></span> Create</button>
    </EditForm>
    <hr />

    <h5>Policies</h5>
    <ul>
        @foreach (var policy in AccessControl.Policies)
        {
            <li>
                <b>External resource:</b> @policy.ExternalResource | <b>Hash code:</b> @Convert.ToBase64String(policy.HashCode)
            </li>
        }
    </ul>

    <EditForm Model="newPolicy">
        <h6>Create new</h6>
        <label>External resource:</label>
        <InputText @bind-Value="newPolicy.ExternalResource" />
        <button class="btn-sm btn-success" @onclick="CreatePolicy"><span class="oi oi-plus"></span> Create</button>
    </EditForm>
    <hr />

    <h5>Proposals</h5>
    <ul>
        @foreach (var proposal in AccessControl.Proposals)
        {
            <li>
                <b>External resource:</b> @proposal.ExternalResource | <b>Hash code:</b> @Convert.ToBase64String(proposal.HashCode)
                | <b>Price:</b> @proposal.Price.ToEth() (@proposal.AmountPaid.ToEth() paid) | <b>Accepted:</b> @proposal.Accepted
                @if (!proposal.Accepted)
                {
                    <button class="btn-sm btn-success" @onclick="(async () => await AcceptProposal(proposal))">Accept</button>
                }
            </li>
        }
    </ul>

    <EditForm Model="newProposal">
        <h6>Create new</h6>
        <label>External resource:</label>
        <InputText @bind-Value="newProposal.ExternalResource" />
        <label>Price (ETH):</label>
        <InputNumber @bind-Value="newProposal.Price" />
        <button class="btn-sm btn-success" @onclick="CreateProposal"><span class="oi oi-plus"></span> Create</button>
    </EditForm>
    <hr />
}

<h5>Query resource</h5>
<EditForm Model="query">
    <label>Private Key:</label>
    <InputText @bind-Value="privateKey" />
    <br />
    <label>Query:</label>
    <InputText @bind-Value="query" />
    <br />
    <button class="btn-sm btn-success" @onclick="QueryResource"><span class="oi oi-media-play"></span> Query</button>
</EditForm>
<h6 class="mt-3">Result:</h6>
<p>@queryResult</p>
